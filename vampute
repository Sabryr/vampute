#!/bin/bash
#Sabryr 06-11-2020
V=0.1
TEMP_F=$(pwd)"/vmpute_tmp"
echo $TEMP_F

function call_ffmpeg(){
	split_arr=("$@")
	if [[ "${#split_arr[@]}" > 0 ]]
	then
		for cmd in "${split_arr[@]}"
		do
			echo $cmd
			eval $cmd
		done
	else
		echo "Nothing to split, check the timing file"
	fi
}

function fabricate_ffmpeg() {
	ffmpeg_split_arr=()
	#check for exiting directories and warn
	extension=$(basename $1 | awk -F . '{print $NF}')
	mkdir $TEMP_F &>/dev/null
	#rm -rf "$TEMP_F/*."
	while IFS=  read -r line
		do
		  # take action on $line #
		if [[ "$line" != \#* ]]
		then
			IFS="," read -ra time_arr <<< "$line"
			if [[ "${#time_arr[@]}" == 2 ]]
			then
				#ffmpeg -i samples/C_2020_Sep_24_zoom_0.mp4 -ss 00:10 -t 00:50 -acodec copy -vcodec copy split-1.mp4
				split_name="$TEMP_F/${time_arr[0]}-${time_arr[1]}.${extension}"
				ffmpeg_split_arr+=("ffmpeg -i $1 -ss ${time_arr[0]} -to ${time_arr[1]} -acodec copy -vcodec copy ${split_name}")
			else
				echo "Error in line $line expected format START_TIME,END_TIME"
			fi
		fi
	done < $2
	call_ffmpeg "${ffmpeg_split_arr[@]}"
 	#ffmpeg -i $1 -ss 0 -t 600 first-10-min.m4v
}


ffmpeg --help &>/dev/null
if [ $? -eq 0 ]
then
	#echo "ffmpeg found"
	if [ $# -le 1 ]
	then
		echo "Please propvide video file to split and timinig file"
	else
		#echo $@
		if [[ -f "$1" ]]
		then
			#echo "Video file "$1
			if [[ -f "$2" ]]
			then
				#echo "Timing file "$2
				fabricate_ffmpeg $1 $2
			else
				echo "invalid file " $2
			fi

		else
			echo "Invalid file " $1
		fi
	fi
else
	echo "Please install ffmpeg"
fi
